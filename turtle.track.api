local nowPath = 'turtle.track.now'
local nextPath = 'turtle.track.next'
local level = 0

if (fs.exists(nextpath)) then
  local next = fs.open(nextPath, 'r')
  level = tonumber(next.readLine())
  local mod = tonumber(next.readLine())
  local fuel = tonumber(next.readLine())
  local move = turtle[next.readLine()]
  next.close()
  if (move and fuel == turtle.getFuelLevel()) then move() end
  level = fuel == turtle.getFuelLevel() and level or level + mod
  local now = fs.open(nowPath, 'w')
  now.writeLine(level)
  now.close()
  fs.delete(nextPath)
end

if (fs.exists(nowPath)) then
  local now = fs.open(nowPath, 'r')
  level = tonumber(now.readLine())
  now.close()
end

local move = function(mod, func)
  local fuel = turtle.getFuelLevel()
  if (fuel < 1) then return false end
  local move = turtle[func]
  if (not move) then return false end
  local next = fs.open(nextPath, 'w')
  next.writeLine(level)
  next.writeLine(mod)
  next.writeLine(fuel)
  next.writeLine(func)
  next.close()
  move()
  if (fuel == turtle.getFuelLevel()) then
    fs.delete(nextPath)
    return false 
  end
  level = level + mod
  local now = fs.open(nowPath, 'w')
  now.writeLine(level)
  now.close()
  fs.delete(nextPath)
  return true
end

turtle.track = {
  active = function() return fs.exists(nowPath) end,
  up = function() return move(1, 'up') end,
  down = function() return move(-1, 'down') end,
  get = function() return level end,
  set = function(v) 
    level = tonumber(v)
    local now = fs.open(nowPath, 'w')
    now.writeLine(level)
    now.close()
    fs.delete(nextPath)
  end,
  clear = function() 
    fs.delete(nowPath)
    fs.delete(nextPath) 
    level = 0 
  end
}

local nowPath = 'turtle.track.now'
local nextPath = 'turtle.track.next'
local level = 0

if (fs.exists(nextpath)) then
  local next = fs.open(nextPath, 'r')
  local fuel = tonumber(next.readLine())
  local mark = tonumber(next.readLine())
  local func = next.readLine()
  next.close()
  if (func and fuel == turtle.getFuelLevel() and turtle[func]()) then
    local now = fs.open(nowPath, 'w')
    now.writeLine(mark)
    now.close()
  end
  fs.delete(nextPath)
end

if (fs.exists(nowPath)) then
  local now = fs.open(nowPath, 'r')
  level = tonumber(now.readLine())
  now.close()
end

local move = function(mod, func)
  if (turtle.getFuelLevel() < 1) then return false end
  local mark = level + mod
  local next = fs.open(nextPath, 'w')
  next.writeLine(turtle.getFuelLevel())
  next.writeLine(mark)
  next.writeLine(func)
  next.close()
  if (not turtle[func]()) then 
    fs.delete(nextPath)
    return false 
  end
  level = mark
  local now = fs.open(nowPath, 'w')
  now.writeLine(mark)
  now.close()
  fs.delete(nextPath)
  return true
end

turtle.track = {
  active: function() return fs.exists(nowPath) end,
  up: function() return move(1, 'up') end,
  down: function() return move(-1, 'down') end,
  get: function() return level end,
  set: function(v) 
    level = tonumber(v)
    local now = fs.open(nowPath, 'w')
    now.writeLine(level)
    now.close()
    fs.delete(nextPath)
  end,
  clear: function() 
    fs.delete(nowPath)
    fs.delete(nextPath) 
    level = 0 
  end
}

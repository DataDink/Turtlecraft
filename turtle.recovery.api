if (not turtle) then error('Error: This functionality requires a turtle') end

local recoverPath = 'turtle.recovery.data'
local commands = {
  forward=true,
  back=true,
  up=true,
  down=true,
  turnLeft=true,
  turnRight=true
}
local byFuel = {
  forward=true,
  back=true,
  up=true,
  down=true
}
local recoveryCommand, recoveryData = (function()
  local file = fs.open(recoverPath, 'r')
  if (not file) then return end
  local content =  file.readAll()
  file.close()
  local commandStart = (content:find('%D') or #content+1)
  local dataStart = (content:find(':') or #content+1)
  local fuel = tonumber(content:sub(1,commandStart-1))
  local command = content:sub(commandStart,dataStart-1)
  local data = content:sub(dataStart+1)
  if (fuel ~= turtle.getFuelLevel()) then
    fs.delete(recoverPath)
    return
  end
  return command, data
end)()

turtle.recovery = {
  set = function(command, data)
    recoveryCommand = command
    recoveryData = tostring(data)
    local score = turtle.recovery.getReliability()
    local file = fs.open(recoverPath, 'w')
    file.write(tostring(turtle.getFuelLevel()) .. command .. ':' .. data)
    file.close()
    return score
  end,
  execute = function()
    turtle[recoveryCommand]()
    fs.delete(recoverPath)
    recoveryCommand = nil
    return recoveryData
  end,
  clear = function()
    fs.delete(recoverPath)
    recoveryCommand = nil
    recoveryData = nil
  end,
  getReliability = function()
    return byFuel[recoveryCommand] and 1
        or commands[recoveryCommand] and 0.5
        or 0
  end
}
